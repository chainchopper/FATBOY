-- Create a table to manage friend requests and friendships
CREATE TABLE public.friend_requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  requester_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  addressee_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  status TEXT CHECK (status IN ('pending', 'accepted', 'declined', 'blocked')) DEFAULT 'pending',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(requester_id, addressee_id)
);

-- Enable Row Level Security for the new table
ALTER TABLE public.friend_requests ENABLE ROW LEVEL SECURITY;

-- Policies for secure data access:
-- Users can see requests they've sent or received.
CREATE POLICY "users_can_see_own_requests" ON public.friend_requests
FOR SELECT TO authenticated USING (
  auth.uid() = requester_id OR auth.uid() = addressee_id
);

-- Users can send new friend requests.
CREATE POLICY "users_can_send_requests" ON public.friend_requests
FOR INSERT TO authenticated WITH CHECK (
  auth.uid() = requester_id AND auth.uid() != addressee_id
);

-- The recipient of a request can update its status (e.g., to 'accepted').
CREATE POLICY "addressees_can_update_requests" ON public.friend_requests
FOR UPDATE TO authenticated USING (
  auth.uid() = addressee_id
);

-- Users can cancel requests they've sent or remove existing friends.
CREATE POLICY "users_can_delete_requests" ON public.friend_requests
FOR DELETE TO authenticated USING (
  auth.uid() = requester_id OR auth.uid() = addressee_id
);